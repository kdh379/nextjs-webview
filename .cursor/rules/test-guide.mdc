---
description: 테스트 작성 가이드
globs: 
---
# Playwright Test Writing Guide

## 1. Project Structure
```
tests/
├── e2e/                 # E2E tests
├── integration/         # Integration tests
├── fixtures/           # Test data
```

## 2. Test File Writing Rules
### File Naming Convention
- Test files should use .spec.ts extension
- File names should be hyphen-separated and clearly express the test target

```
login.spec.ts
create-post.spec.ts
user-profile.spec.ts
```

### Basic Test Structure
```ts
import { test, expect } from '@playwright/test';
import { TEST_USERS } from '../fixtures/users';

test.describe('Authentication and Login Tests', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/login');
  });

  test('Should navigate to dashboard with valid credentials', async ({ page }) => {
    // Test logic
  });
});
```

## 3. Test Case Writing Rules
### Test Description
```ts
// ❌ Bad example
test('login test', async ({ page }) => {});

// ✅ Good example
test('should redirect to dashboard when logging in with valid email and password', async ({ page }) => {});
```

### Test Step Separation
```ts
test('Product purchase process', async ({ page }) => {
  await test.step('Navigate to product page', async () => {
    await page.goto('/products/1');
    await expect(page).toHaveURL('/products/1');
  });

  await test.step('Add to cart', async () => {
    await page.getByRole('button', { name: 'Add to Cart' }).click();
    await expect(page.getByRole('alert')).toHaveText('Added to cart');
  });
});
```

## 4. Locator Strategy
### Priority
```ts
// 1. Role and accessibility attributes (Highest priority)
page.getByLabel('Email')
page.getByRole('button', { name: 'Login' })
page.getByRole('textbox', { name: 'Password' })
page.getByRole('heading', { name: 'Sign Up' })

// 2. Text and others
page.getByText('Create Account')
page.getByPlaceholder('Enter your email')

// 3. Test ID (Use when selection by role and accessibility attributes is difficult)
// ⚠️ Verify that the element has data-testid attribute defined before using
page.getByTestId('submit-button')

// Anti-patterns
// ❌ Approaches to avoid
page.locator('.login-btn')
page.locator('div > button')
```

## 5. Assertions Guide
```ts
// Element state assertions
await expect(page.getByRole('button')).toBeEnabled();
await expect(page.getByRole('alert')).toBeVisible();

// Text assertions
await expect(page.getByRole('heading')).toHaveText('Welcome');

// URL assertions
await expect(page).toHaveURL(/.*dashboard/);

// Multiple elements assertions
await expect(page.getByRole('listitem')).toHaveCount(3);
```

## 6. Test Data Management
```ts
// tests/fixtures/users.ts
export const TEST_USERS = {
  valid: {
    email: 'test@example.com',
    password: 'password123'
  },
  invalid: {
    email: 'invalid@example.com',
    password: 'wrong'
  }
};
```

## 7. Mocking Strategy
Use API mocking only in the following cases:
- When there are external API dependencies
- When real API is not available in test environment
- When testing specific error scenarios
- Mocking file location: src/mocks/apis/[schema].ts
```ts
// Display error message when vehicle lookup API fails
test('Should display error message when vehicle lookup API fails', async ({ page }) => {
  await page.route('**/car', route => {
    route.fulfill({
      status: 503,
      contentType: 'application/json',
      body: JSON.stringify({
        code: 'E062',
        message: 'Unable to load information due to communication issues.\nPlease try again later.'
      })
    });
  });

  await page.goto('/cars');
  await expect(page.getByRole('alert')).toHaveText('Unable to load information due to communication issues.\nPlease try again later.');
});

// Business error test example
test('Should display error message when deleting vehicle with registered products', async ({ page }) => {
  await page.route('**/car/1', route => {
    route.fulfill({
      status: 400,
      contentType: 'application/json',
      body: JSON.stringify({
        code: 'C002',
        message: 'There are products registered with this vehicle.',
        result: {
          serviceName: 'Test Service',
          productName: 'Test Product'
        }
      })
    });
  });

  await page.getByRole('button', { name: 'Delete' }).click();
  await expect(page.getByRole('alert')).toHaveText('There are products registered with this vehicle.');
});

// Success response test example
test('Successfully fetch vehicle list', async ({ page }) => {
  await page.route('**/car', route => {
    route.fulfill({
      status: 200,
      contentType: 'application/json',
      body: JSON.stringify({
        code: '200',
        message: 'Success',
        result: {
          page: 1,
          size: 15,
          total: 1,
          list: [{
            id: 1,
            businessLicenseId: 3,
            businessLicenseName: 'Test Business',
            carNumber: '44ga4444',
            carTypeFuelCode: 1,
            carTypeFuelName: 'LPG',
            carTypeGradeCode: 1,
            carTypeGradeName: 'Compact',
            carTypeName: 'Genesis Coupe 380 GT P',
            modelYear: 2024
          }]
        }
      })
    });
  });

  await page.goto('/cars');
  await expect(page.getByRole('row')).toHaveCount(2); // Header row + data row
});
```

## 8. Authentication State Management (storageState)
### Use in tests requiring authentication
```typescript
// tests/e2e/protected-route.spec.ts
import { test } from '@playwright/test';

test.use({ storageState: './tests/fixtures/auth.json' });

test('Access protected page', async ({ page }) => {
  await page.goto('/dashboard');
  // ... test logic
});
```
