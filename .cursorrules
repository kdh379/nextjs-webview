Always respond in Korean

## Directory Structure

- src
- src/app: Next.js App Routers
- src/app/[folder]/action.ts: server action function for specific page
- src/components/common: common components
- src/components/[pageName]/components/*: Components for specific page
- src/components/[pageName]/constants/*
- src/components/[pageName]/hooks/*
- src/components/[pageName]/lib/*
- src/hooks: Common hooks
- src/lib: utility functions
- src/types: TypeScript types
- src/types/utils.d.ts: Utility types
- src/types/api/[apiName].d.ts: API types

## Next.js: Must use Server Action

- All API interactions must use Server Actions
- All Client Components must use `useAction` or `useInfiniteAction` hooks
  - `useAction` is for calling server actions
  - Hooks are defined in src/hooks/useAction.ts

## API Patterns

### 1. API Type Definition

```typescript
// src/types/api/[name].d.ts
export type paths = {
  "/endpoint": {
    get: {
      query: GetEndpointQuery;
      responses: {
        200: SuccessResponse;
        400: ErrorResponse;
      };
    };
  };
};
```

### 2. API Error Response Patterns

- E000: General Errors (e.g., E011 - "Already registered data")
- C000: Business Errors (e.g., C002 - "Related data exists")
- A000: Authentication Errors (e.g., A001 - "Authentication expired")

### 3. Important Guidelines

1. Server Actions must be defined in `app/[folder]/action.ts`
2. Always use `useAction` or `useInfiniteAction` in Client Components at render time
3. Always use Server Action Call on User Interaction like Submit Button Click
4. Handle errors in `onError` callback
5. Implement `getNextPageParam` logic for pagination
6. Return type must follow { data, error } pattern

### 4. Best Practices

1. API Type Definition:
   - Use `paths` type for API endpoints
   - Define all possible responses
   - Include error response types

2. Server Action:
   - Handle all possible errors
   - Return consistent type structure
   - Use proper TypeScript types

3. Client Usage:
   - Proper error handling
   - Loading states management
   - Pagination implementation

## Code Convention

### TypeScript

- Use `type` instead of `interface`
- Use `type` for utility types
- Use `type` for custom types

## Clean Code Guidelines

### 1. Readability

- Reduce Context
  - Separate unrelated code
  - Abstract implementation details
  - Separate functions by logic type
- Use Meaningful Names
  - Give meaningful names to complex conditions
  - Use constants instead of magic numbers
- Natural Flow from top to bottom
  - Minimize unnecessary timing shifts
  - Use simple ternary operators

### 2. Predictability

- Avoid Duplicate Names
- Use Consistent Return Types for similar functions
- Explicitly Express Hidden Logic

### 3. Cohesion

- Group Related Files in same directory
- Remove Magic Numbers
- Manage Form Logic with high cohesion

### 4. Coupling

- Follow Single Responsibility Principle
- Allow Code Duplication when necessary
- Minimize Props Drilling

## Priority Decision

- When Cohesion and Readability conflict:
  - Prioritize cohesion when error risk is high
  - Prioritize readability when risk is low
- Adjust code quality standards according to the situation

